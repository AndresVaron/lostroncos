{"version":3,"sources":["Home/Home.jsx","MapaPrincipal/MapaPrincipal.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","irId","props","history","push","pathname","ingreso","className","onClick","this","React","Component","withRouter","MapaPrincipal","state","id","match","params","location","setState","google","LatLng","maps","LatLngBounds","Marker","map","Point","pos1","pos2","pos3","pos4","bounds","extend","fitBounds","markerP1","position","markerP2","pintarSalto","setTimeout","markerP3","markerP4","style","height","width","bootstrapURLKeys","key","libraries","join","defaultCenter","lat","myLocation","lng","defaultZoom","zoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","handleGoogleMapApi","bind","lineLength","geometry","spherical","computeDistanceBetween","getPosition","lineHeading","computeHeading","markerA","computeOffset","icon","url","size","Size","anchor","markerB","latlong1","latlong2","latlong3","latlong4","resolution","B1","t","B2","B3","B4","getBezier","C1","C2","C3","C4","percent","pos","x","y","lat1","long1","lat2","long2","lat3","long3","lat4","long4","points","it","path","i","length","Line","Polyline","geodesic","strokeOpacity","icons","scale","offset","repeat","strokeColor","setMap","gmapsCubicBezier","App","saveLocation","coords","latitude","longitude","console","log","navigator","geolocation","getCurrentPosition","isGeolocationAvailable","isGeolocationEnabled","exact","component","render","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","window","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"gWAIMA,G,iNACJC,KAAO,WACL,EAAKC,MAAMC,QAAQC,KAAK,CAAEC,SAAU,QAASC,SAAS,K,wEAItD,OACE,yBAAKC,UAAU,mBACb,6BACE,4BAAQA,UAAU,kBAAkBC,QAASC,KAAKR,MAAlD,wB,GATSS,IAAMC,YAkBVC,cAAWZ,G,yBCjBpBa,E,YACJ,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KACDY,MAAQ,CACXC,GAAI,EAAKb,MAAMc,MAAMC,OAAOF,GAC5BT,SAAS,GAJM,E,iFASK,SAAlBG,KAAKK,MAAMC,IAEbN,KAAKP,MAAMC,QAAQC,KAAK,MAEU,IAAhCK,KAAKP,MAAMgB,SAASZ,QACtBG,KAAKU,SAAS,CACZb,SAAS,IAGXG,KAAKU,SAAS,CACZb,SAAS,M,yCAKIc,GAAS,IAAD,OACrBC,EAASD,EAAOE,KAAKD,OACvBE,EAAeH,EAAOE,KAAKC,aAC3BC,EAASJ,EAAOE,KAAKE,OAEjBC,GADIL,EAAOE,KAAKI,MACVN,EAAOK,KAEfE,EAAO,IAAIN,EAAO,WAAY,YAC9BO,EAAO,IAAIP,EAAO,WAAY,WAC9BQ,EAAO,IAAIR,EAAO,WAAY,WAC9BS,EAAO,IAAIT,EAAO,WAAY,WAE9BU,EAAS,IAAIR,EACjBQ,EAAOC,OAAOL,GACdI,EAAOC,OAAOJ,GACdG,EAAOC,OAAOH,GACdE,EAAOC,OAAOF,GACdL,EAAIQ,UAAUF,GAEd,IAAIG,EAAW,IAAIV,EAAO,CACxBW,SAAUR,EACVF,IAAKA,IAEHW,EAAW,IAAIZ,EAAO,CACxBW,SAAUP,EACVH,IAAKA,IAEPhB,KAAK4B,YAAYH,EAAUE,EAAUX,EAAKL,GAE1CkB,YACE,WACE,IAAIC,EAAW,IAAIf,EAAO,CACxBW,SAAUN,EACVJ,IAAKA,IAEP,EAAKY,YAAYD,EAAUG,EAAUd,EAAKL,GAC1CkB,YAAW,WACT,IAAIE,EAAW,IAAIhB,EAAO,CACxBW,SAAUL,EACVL,IAAKA,IAEP,EAAKY,YAAYE,EAAUC,EAAUf,EAAKL,KACzC,OAGL,O,+BAKF,OACE,yBAAKb,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,yBAAKkC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACpC,kBAAC,IAAD,CACEC,iBAAkB,CAChBC,IAAK,0CACLC,UAAW,CAAC,oBAAoBC,KAAK,MAEvCC,cAAe,CACbC,IAAKxC,KAAKP,MAAMgD,WAAWD,IAC3BE,IAAK1C,KAAKP,MAAMgD,WAAWC,KAE7BC,YAAa3C,KAAKP,MAAMgD,WAAWG,KACnCC,oCAAkC,EAClCC,kBAAmB9C,KAAK+C,mBAAmBC,KAAKhD,e,kCAUpDyB,EAAUE,EAAUX,EAAKL,GACnC,IAAIsC,EAAatC,EAAOE,KAAKqC,SAASC,UAAUC,uBAC9C3B,EAAS4B,cACT1B,EAAS0B,eAGPC,EAAc3C,EAAOE,KAAKqC,SAASC,UAAUI,eAC/C9B,EAAS4B,cACT1B,EAAS0B,eAGPG,EAAU,IAAI7C,EAAOE,KAAKE,OAAO,CACnCW,SAAUf,EAAOE,KAAKqC,SAASC,UAAUM,cACvChC,EAAS4B,cACTJ,EAAa,EACbK,EAAc,IAEhBI,KAAM,CACJC,IACE,wEACFC,KAAM,IAAIjD,EAAOE,KAAKgD,KAAK,EAAG,GAC9BC,OAAQ,IAAInD,EAAOE,KAAKI,MAAM,IAAK,QAGnC8C,EAAU,IAAIpD,EAAOE,KAAKE,OAAO,CACnCW,SAAUf,EAAOE,KAAKqC,SAASC,UAAUM,cACvC9B,EAAS0B,cACTJ,EAAa,EACE,IAAdK,GAEHI,KAAM,CACJC,IACE,wEACFC,KAAM,IAAIjD,EAAOE,KAAKgD,KAAK,EAAG,GAC9BC,OAAQ,IAAInD,EAAOE,KAAKI,MAAM,IAAK,SAIhB,SACrB+C,EACAC,EACAC,EACAC,EACAC,GAwCA,IAtCA,IAAIC,EAAK,SAAAC,GACP,OAAOA,EAAIA,EAAIA,GAEbC,EAAK,SAAAD,GACP,OAAO,EAAIA,EAAIA,GAAK,EAAIA,IAEtBE,EAAK,SAAAF,GACP,OAAO,EAAIA,GAAK,EAAIA,IAAM,EAAIA,IAE5BG,EAAK,SAAAH,GACP,OAAQ,EAAIA,IAAM,EAAIA,IAAM,EAAIA,IAE9BI,EAAY,SAACC,EAAIC,EAAIC,EAAIC,EAAIC,GAC/B,IAAIC,EAAM,GAWV,OAVAA,EAAIC,EACFN,EAAGM,EAAIZ,EAAGU,GACVH,EAAGK,EAAIV,EAAGQ,GACVF,EAAGI,EAAIT,EAAGO,GACVD,EAAGG,EAAIR,EAAGM,GACZC,EAAIE,EACFP,EAAGO,EAAIb,EAAGU,GACVH,EAAGM,EAAIX,EAAGQ,GACVF,EAAGK,EAAIV,EAAGO,GACVD,EAAGI,EAAIT,EAAGM,GACLC,GAGLG,EAAOnB,EAASxB,MAChB4C,EAAQpB,EAAStB,MACjB2C,EAAOpB,EAASzB,MAChB8C,EAAQrB,EAASvB,MACjB6C,EAAOrB,EAAS1B,MAChBgD,EAAQtB,EAASxB,MACjB+C,EAAOtB,EAAS3B,MAChBkD,EAAQvB,EAASzB,MAEjBiD,EAAS,GAEJC,EAAK,EAAGA,GAAM,EAAGA,GAAMxB,EAC9BuB,EAAOhG,KACL+E,EACE,CACEO,EAAGE,EACHD,EAAGE,GAEL,CACEH,EAAGI,EACHH,EAAGI,GAEL,CACEL,EAAGM,EACHL,EAAGM,GAEL,CACEP,EAAGQ,EACHP,EAAGQ,GAELE,IAKN,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAAOI,OAAS,EAAGD,IACrCD,EAAKlG,KAAK,IAAIgB,EAAOE,KAAKD,OAAO+E,EAAOG,GAAGb,EAAGU,EAAOG,GAAGZ,IACxDW,EAAKlG,KACH,IAAIgB,EAAOE,KAAKD,OAAO+E,EAAOG,EAAI,GAAGb,EAAGU,EAAOG,EAAI,GAAGZ,GAAG,IAI7D,IAAIc,EAAO,IAAIrF,EAAOE,KAAKoF,SAAS,CAClCJ,KAAMA,EACNK,UAAU,EACVC,cAAe,EACfC,MAAO,CACL,CACE1C,KAAM,CACJmC,KAAM,aACNM,cAAe,EACfE,MAAO,GAETC,OAAQ,IACRC,OAAQ,SAGZC,YAAa,SAGfR,EAAKS,OAAOzF,IAKG0F,CACfjF,EAAS4B,cACTG,EAAQH,cACRU,EAAQV,cACR1B,EAAS0B,cACT,KAGS,IAAI1C,EAAOE,KAAKoF,SAAS,CAClCJ,KAAM,CAACpE,EAAS4B,cAAe1B,EAAS0B,eACxC8C,cAAe,EACfC,MAAO,CACL,CACE1C,KAAM,CACJmC,KAAM,aACNM,cAAe,EACfE,MAAO,GAETC,OAAQ,IACRC,OAAQ,e,GAlQUtG,IAAMC,WAyQnBC,cAAWC,G,QCvQpBuG,E,YAEJ,WAAYlH,GAAQ,IAAD,8BACjB,4CAAMA,KAqBRmH,aAAe,SAAAlF,GACb,EAAKhB,SAAS,CACZD,SAAU,CACR+B,IAAKd,EAASmF,OAAOC,SACrBpE,IAAKhB,EAASmF,OAAOE,UACrBnE,KAAM,OAzBVoE,QAAQC,IAAI,EAAKxH,OACjB,EAAKY,MAAQ,CACXI,SAAU,CAAE+B,IAAK,UAAWE,KAAM,WAAYE,KAAM,IAGtDsE,UAAUC,YAAYC,mBAAmB,EAAKR,cAE5C,EAAKnH,MAAM4H,wBACX,EAAK5H,MAAM6H,sBACX,EAAK7H,MAAMoH,QAEX,EAAKnG,SAAS,CACZD,SAAU,CACR+B,IAAK,EAAK/C,MAAMoH,OAAOC,SACvBpE,IAAK,EAAKjD,MAAMoH,OAAOE,UACvBnE,KAAM,MAjBK,E,sEA+BT,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2E,OAAK,EAAC1B,KAAK,IAAI2B,UAAW,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CACED,OAAK,EACL1B,KAAK,OACL2B,UAAW,kBAAM,kBAAC,EAAD,CAAQ/E,WAAY,EAAKpC,MAAMI,cAElD,kBAAC,IAAD,CAAOoF,KAAK,IAAI4B,OAAQ,kBAAM,kBAAC,EAAD,e,GA3CtBvH,aAkDHwH,uBAAW,CACxBC,gBAAiB,CACfC,oBAAoB,GAEtBC,oBAAqB,KAJRH,CAKZf,GClDiBmB,QACW,cAA7BC,OAAOtH,SAASuH,UAEe,UAA7BD,OAAOtH,SAASuH,UAEhBD,OAAOtH,SAASuH,SAASzH,MACvB,2DCXN0H,IAASR,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFS,SAASC,eAAe,SDsHpB,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e244d379.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Home.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Home extends React.Component {\r\n  irId = () => {\r\n    this.props.history.push({ pathname: \"/1234\", ingreso: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div>\r\n          <button className=\"btn btn-primary\" onClick={this.irId}>\r\n            Ir a Historico\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import React from \"react\";\r\nimport \"./MapaPrincipal.css\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass MapaPrincipal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: this.props.match.params.id,\r\n      ingreso: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.id === \"1234\") {\r\n    } else {\r\n      this.props.history.push(\"/\");\r\n    }\r\n    if (this.props.location.ingreso === true) {\r\n      this.setState({\r\n        ingreso: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        ingreso: false\r\n      });\r\n    }\r\n  }\r\n\r\n  handleGoogleMapApi(google) {\r\n    var LatLng = google.maps.LatLng,\r\n      LatLngBounds = google.maps.LatLngBounds,\r\n      Marker = google.maps.Marker,\r\n      Point = google.maps.Point;\r\n    const map = google.map;\r\n\r\n    var pos1 = new LatLng(23.634501, -102.552783);\r\n    var pos2 = new LatLng(17.987557, -92.929147);\r\n    var pos3 = new LatLng(12.987557, -92.929147);\r\n    var pos4 = new LatLng(17.987557, -98.929147);\r\n\r\n    var bounds = new LatLngBounds();\r\n    bounds.extend(pos1);\r\n    bounds.extend(pos2);\r\n    bounds.extend(pos3);\r\n    bounds.extend(pos4);\r\n    map.fitBounds(bounds);\r\n\r\n    var markerP1 = new Marker({\r\n      position: pos1,\r\n      map: map\r\n    });\r\n    var markerP2 = new Marker({\r\n      position: pos2,\r\n      map: map\r\n    });\r\n    this.pintarSalto(markerP1, markerP2, map, google);\r\n\r\n    setTimeout(\r\n      () => {\r\n        var markerP3 = new Marker({\r\n          position: pos3,\r\n          map: map\r\n        });\r\n        this.pintarSalto(markerP2, markerP3, map, google);\r\n        setTimeout(() => {\r\n          var markerP4 = new Marker({\r\n            position: pos4,\r\n            map: map\r\n          });\r\n          this.pintarSalto(markerP3, markerP4, map, google);\r\n        }, 2000);\r\n      },\r\n\r\n      2000\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 noPadding\">\r\n            <div className=\"contenedorPrincipal\">\r\n              <div style={{ height: \"100vh\", width: \"100%\" }}>\r\n                <GoogleMapReact\r\n                  bootstrapURLKeys={{\r\n                    key: \"AIzaSyAEN10VnQRdN67sDTlx-mfWapGXB8rLMas\",\r\n                    libraries: [\"drawing,geometry\"].join(\",\")\r\n                  }}\r\n                  defaultCenter={{\r\n                    lat: this.props.myLocation.lat,\r\n                    lng: this.props.myLocation.lng\r\n                  }}\r\n                  defaultZoom={this.props.myLocation.zoom}\r\n                  yesIWantToUseGoogleMapApiInternals\r\n                  onGoogleApiLoaded={this.handleGoogleMapApi.bind(this)}\r\n                ></GoogleMapReact>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  pintarSalto(markerP1, markerP2, map, google) {\r\n    var lineLength = google.maps.geometry.spherical.computeDistanceBetween(\r\n      markerP1.getPosition(),\r\n      markerP2.getPosition()\r\n    );\r\n\r\n    var lineHeading = google.maps.geometry.spherical.computeHeading(\r\n      markerP1.getPosition(),\r\n      markerP2.getPosition()\r\n    );\r\n\r\n    var markerA = new google.maps.Marker({\r\n      position: google.maps.geometry.spherical.computeOffset(\r\n        markerP1.getPosition(),\r\n        lineLength / 3,\r\n        lineHeading - 60\r\n      ),\r\n      icon: {\r\n        url:\r\n          \"https://maps.gstatic.com/intl/en_us/mapfiles/markers2/measle_blue.png\",\r\n        size: new google.maps.Size(7, 7),\r\n        anchor: new google.maps.Point(3.5, 3.5)\r\n      }\r\n    });\r\n    var markerB = new google.maps.Marker({\r\n      position: google.maps.geometry.spherical.computeOffset(\r\n        markerP2.getPosition(),\r\n        lineLength / 3,\r\n        -lineHeading + 120\r\n      ),\r\n      icon: {\r\n        url:\r\n          \"https://maps.gstatic.com/intl/en_us/mapfiles/markers2/measle_blue.png\",\r\n        size: new google.maps.Size(7, 7),\r\n        anchor: new google.maps.Point(3.5, 3.5)\r\n      }\r\n    });\r\n\r\n    let gmapsCubicBezier = (\r\n      latlong1,\r\n      latlong2,\r\n      latlong3,\r\n      latlong4,\r\n      resolution\r\n    ) => {\r\n      let B1 = t => {\r\n        return t * t * t;\r\n      };\r\n      let B2 = t => {\r\n        return 3 * t * t * (1 - t);\r\n      };\r\n      let B3 = t => {\r\n        return 3 * t * (1 - t) * (1 - t);\r\n      };\r\n      let B4 = t => {\r\n        return (1 - t) * (1 - t) * (1 - t);\r\n      };\r\n      let getBezier = (C1, C2, C3, C4, percent) => {\r\n        var pos = {};\r\n        pos.x =\r\n          C1.x * B1(percent) +\r\n          C2.x * B2(percent) +\r\n          C3.x * B3(percent) +\r\n          C4.x * B4(percent);\r\n        pos.y =\r\n          C1.y * B1(percent) +\r\n          C2.y * B2(percent) +\r\n          C3.y * B3(percent) +\r\n          C4.y * B4(percent);\r\n        return pos;\r\n      };\r\n\r\n      var lat1 = latlong1.lat();\r\n      var long1 = latlong1.lng();\r\n      var lat2 = latlong2.lat();\r\n      var long2 = latlong2.lng();\r\n      var lat3 = latlong3.lat();\r\n      var long3 = latlong3.lng();\r\n      var lat4 = latlong4.lat();\r\n      var long4 = latlong4.lng();\r\n\r\n      var points = [];\r\n\r\n      for (let it = 0; it <= 1; it += resolution) {\r\n        points.push(\r\n          getBezier(\r\n            {\r\n              x: lat1,\r\n              y: long1\r\n            },\r\n            {\r\n              x: lat2,\r\n              y: long2\r\n            },\r\n            {\r\n              x: lat3,\r\n              y: long3\r\n            },\r\n            {\r\n              x: lat4,\r\n              y: long4\r\n            },\r\n            it\r\n          )\r\n        );\r\n      }\r\n      var path = [];\r\n      for (var i = 0; i < points.length - 1; i++) {\r\n        path.push(new google.maps.LatLng(points[i].x, points[i].y));\r\n        path.push(\r\n          new google.maps.LatLng(points[i + 1].x, points[i + 1].y, false)\r\n        );\r\n      }\r\n\r\n      var Line = new google.maps.Polyline({\r\n        path: path,\r\n        geodesic: true,\r\n        strokeOpacity: 0.0,\r\n        icons: [\r\n          {\r\n            icon: {\r\n              path: \"M 0,-1 0,1\",\r\n              strokeOpacity: 1,\r\n              scale: 4\r\n            },\r\n            offset: \"0\",\r\n            repeat: \"20px\"\r\n          }\r\n        ],\r\n        strokeColor: \"grey\"\r\n      });\r\n\r\n      Line.setMap(map);\r\n\r\n      return Line;\r\n    };\r\n\r\n    var curvedLine = gmapsCubicBezier(\r\n      markerP1.getPosition(),\r\n      markerA.getPosition(),\r\n      markerB.getPosition(),\r\n      markerP2.getPosition(),\r\n      0.01\r\n    );\r\n\r\n    var line = new google.maps.Polyline({\r\n      path: [markerP1.getPosition(), markerP2.getPosition()],\r\n      strokeOpacity: 0,\r\n      icons: [\r\n        {\r\n          icon: {\r\n            path: \"M 0,-1 0,1\",\r\n            strokeOpacity: 1,\r\n            scale: 4\r\n          },\r\n          offset: \"0\",\r\n          repeat: \"20px\"\r\n        }\r\n      ]\r\n    });\r\n  }\r\n}\r\n\r\nexport default withRouter(MapaPrincipal);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Home from \"./Home/Home.jsx\";\r\nimport Detail from \"./MapaPrincipal/MapaPrincipal.jsx\";\r\nimport { geolocated } from \"react-geolocated\";\r\n\r\nclass App extends Component {\r\n  // One-shot position request.\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(this.props);\r\n    this.state = {\r\n      location: { lat: 3.5592541, lng: -73.7307292, zoom: 6 }\r\n    };\r\n\r\n    navigator.geolocation.getCurrentPosition(this.saveLocation);\r\n    if (\r\n      this.props.isGeolocationAvailable &&\r\n      this.props.isGeolocationEnabled &&\r\n      this.props.coords\r\n    ) {\r\n      this.setState({\r\n        location: {\r\n          lat: this.props.coords.latitude,\r\n          lng: this.props.coords.longitude,\r\n          zoom: 14\r\n        }\r\n      });\r\n    }\r\n  }\r\n  saveLocation = position => {\r\n    this.setState({\r\n      location: {\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude,\r\n        zoom: 14\r\n      }\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={() => <Home />} />\r\n          <Route\r\n            exact\r\n            path=\"/:id\"\r\n            component={() => <Detail myLocation={this.state.location} />}\r\n          />\r\n          <Route path=\"*\" render={() => <Home />} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default geolocated({\r\n  positionOptions: {\r\n    enableHighAccuracy: false\r\n  },\r\n  userDecisionTimeout: 5000\r\n})(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}